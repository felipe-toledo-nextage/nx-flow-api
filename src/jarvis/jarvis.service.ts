import { Injectable } from '@nestjs/common';

interface ProcessMessageRequest {
  message: string;
  projectId: string;
  projectContext: any;
  user: any;
}

@Injectable()
export class JarvisService {
  private openaiApiKey = process.env.OPENAI_API_KEY;
  private apiUrl = 'https://api.openai.com/v1/chat/completions';

  async processMessage(request: ProcessMessageRequest): Promise<string> {
    const { message, projectContext, user } = request;

    try {
      // Preparar contexto do projeto para a IA
      const systemPrompt = this.buildSystemPrompt(projectContext, user);
      
      // Se n√£o tiver API key, usar fallback local
      if (!this.openaiApiKey) {
        return this.generateLocalResponse(message, projectContext);
      }

      // Chamar OpenAI
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.openaiApiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: message }
          ],
          max_tokens: 500,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        console.error('Erro na API OpenAI:', response.status);
        return this.generateLocalResponse(message, projectContext);
      }

      const data = await response.json();
      return data.choices[0]?.message?.content || this.generateLocalResponse(message, projectContext);

    } catch (error) {
      console.error('Erro ao processar mensagem:', error);
      return this.generateLocalResponse(message, projectContext);
    }
  }

  private buildSystemPrompt(projectContext: any, user: any): string {
    const { project, metrics } = projectContext;
    
    return `Voc√™ √© Jarvis, um assistente inteligente especializado em gest√£o de projetos e an√°lise de dados do Jira.

CONTEXTO DO PROJETO:
- Nome: ${project.name}
- Descri√ß√£o: ${project.description || 'N√£o informada'}
- Status: ${project.status}
- Data de In√≠cio: ${project.startDate}
- Data de Entrega: ${project.endDate}
- URL do Jira: ${project.jiraUrl}
- Chave do Projeto: ${project.jiraProjectKey}

M√âTRICAS ATUAIS:
- Progresso: ${metrics.completionRate || 0}%
- Total de Issues: ${metrics.totalIssues || 0}
- Issues Conclu√≠das: ${metrics.completedIssues || 0}
- Issues em Progresso: ${metrics.inProgressIssues || 0}
- Issues Pendentes: ${metrics.todoIssues || 0}
- Velocidade: ${metrics.velocity || 0} issues/sprint
- Taxa de Bugs: ${metrics.bugRate || 0}%
- Tempo M√©dio de Resolu√ß√£o: ${metrics.avgResolutionTime || 0} dias

USU√ÅRIO:
- Nome: ${user.name}
- Email: ${user.email}
- Role: ${user.role}

INSTRU√á√ïES:
1. Responda de forma clara, concisa e √∫til
2. Use os dados fornecidos para dar insights espec√≠ficos e acion√°veis
3. Se solicitado, d√™ conselhos para melhorar a sa√∫de do projeto
4. Analise tend√™ncias e identifique problemas ou oportunidades
5. Formate suas respostas de forma limpa, sem tabelas complexas
6. Use emojis para deixar mais amig√°vel
7. Seja proativo em sugerir a√ß√µes baseadas nos dados
8. Mantenha respostas entre 100-300 palavras

Baseie todas as respostas nos dados reais fornecidos acima.`;
  }

  private generateLocalResponse(message: string, projectContext: any): string {
    const lowerMessage = message.toLowerCase();
    const { project, metrics } = projectContext;
    const completionRate = metrics.completionRate || 0;
    const totalIssues = metrics.totalIssues || 0;
    const completedIssues = metrics.completedIssues || 0;
    const inProgressIssues = metrics.inProgressIssues || 0;
    const todoIssues = metrics.todoIssues || 0;
    const velocity = metrics.velocity || 0;
    const bugRate = metrics.bugRate || 0;
    const avgResolutionTime = metrics.avgResolutionTime || 0;

    // An√°lise de sa√∫de do projeto
    if (lowerMessage.includes('dica') || lowerMessage.includes('conselho') || lowerMessage.includes('melhor') || lowerMessage.includes('saude')) {
      const suggestions: string[] = [];
      
      if (velocity === 0) suggestions.push('Configure sprints no Jira para medir velocidade da equipe');
      if (completionRate < 50) suggestions.push('Priorize issues cr√≠ticas para acelerar o progresso');
      if (todoIssues > completedIssues) suggestions.push('Reduza o backlog focando nas issues de maior valor');
      if (avgResolutionTime === 0) suggestions.push('Implemente tracking de tempo para medir efici√™ncia');
      if (inProgressIssues > 10) suggestions.push('Limite issues em progresso para melhorar foco da equipe');
      
      return `üí° Dicas para Melhorar a Sa√∫de do Projeto ${project.name}

Com base na an√°lise dos dados, aqui est√£o minhas recomenda√ß√µes:

${suggestions.length > 0 ? suggestions.map((s, i) => `${i + 1}. ${s}`).join('\n') : 'O projeto est√° em boa forma! Continue mantendo o bom trabalho.'}

An√°lise Atual:
‚Ä¢ Progresso: ${completionRate}% (${completionRate >= 70 ? 'Excelente!' : completionRate >= 50 ? 'Bom ritmo' : 'Precisa acelerar'})
‚Ä¢ Distribui√ß√£o: ${completedIssues} conclu√≠das, ${inProgressIssues} em progresso, ${todoIssues} pendentes
‚Ä¢ Status: ${project.status}

${completionRate >= 70 ? 'üéØ Projeto em excelente andamento!' : '‚ö° Foque nas issues de alta prioridade para acelerar!'}`;
    }

    // Resposta padr√£o mais inteligente
    return `üìä An√°lise do Projeto ${project.name}

${message.includes('status') || message.includes('overview') ? 
  `Situa√ß√£o Atual: O projeto est√° ${completionRate}% completo com ${totalIssues} issues totais.

Distribui√ß√£o:
‚Ä¢ ${completedIssues} issues conclu√≠das
‚Ä¢ ${inProgressIssues} em progresso  
‚Ä¢ ${todoIssues} pendentes

${completionRate >= 70 ? 'Projeto em √≥timo andamento!' : completionRate >= 50 ? 'Progresso satisfat√≥rio.' : 'Precisa de mais aten√ß√£o.'}` :

  `Entendi sua solicita√ß√£o sobre "${message}".

Com ${completionRate}% de progresso e ${completedIssues}/${totalIssues} issues conclu√≠das, o projeto ${project.name} est√° ${completionRate >= 70 ? 'em excelente forma' : 'progredindo bem'}.

Como posso ajudar mais especificamente?`}`;
  }
}